Elapsed Time: 336.096s
    Clockticks: 14,462,786,000,000
    Instructions Retired: 3,683,836,000,000
    CPI Rate: 3.926
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    MUX Reliability: 0.997
    Retiring: 11.6% of Pipeline Slots
        Light Operations: 11.5% of Pipeline Slots
        Heavy Operations: 0.2% of Pipeline Slots
            Microcode Sequencer: 0.2% of Pipeline Slots
                Assists: 0.7% of Pipeline Slots
    Front-End Bound: 2.3% of Pipeline Slots
        Front-End Latency: 2.2% of Pipeline Slots
            ICache Misses: 0.3% of Clockticks
            ITLB Overhead: 0.0% of Clockticks
            Branch Resteers: 0.1% of Clockticks
            DSB Switches: 0.0% of Clockticks
            Length Changing Prefixes: 0.0% of Clockticks
            MS Switches: 0.2% of Clockticks
        Front-End Bandwidth: 0.1% of Pipeline Slots
            Front-End Bandwidth MITE: 0.2% of Clockticks
            Front-End Bandwidth DSB: 0.2% of Clockticks
            (Info) DSB Coverage: 2.5%
    Bad Speculation: 0.2% of Pipeline Slots
        Branch Mispredict: 0.0% of Pipeline Slots
        Machine Clears: 0.2% of Pipeline Slots
    Back-End Bound: 85.8% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 79.0% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 19.2% of Clockticks
             | This metric shows how often machine was stalled without missing
             | the L1 data cache. The L1 cache typically has the shortest
             | latency. However, in certain cases like loads blocked on older
             | stores, a load might suffer a high latency even though it is
             | being satisfied by the L1. Note that this metric value may be
             | highlighted due to DTLB Overhead or Cycles of 1 Port Utilized
             | issues.
             |
                DTLB Overhead: 0.0% of Clockticks
                Loads Blocked by Store Forwarding: 0.0% of Clockticks
                Lock Latency: 0.0% of Clockticks
                 | A significant fraction of CPU cycles spent handling cache
                 | misses due to lock operations. Due to the microarchitecture
                 | handling of locks, they are classified as L1 Bound regardless
                 | of what memory source satisfied them. Note that this metric
                 | value may be highlighted due to Store Latency issue.
                 |
                Split Loads: 0.9% of Clockticks
                4K Aliasing: 2.7% of Clockticks
                FB Full: 100.0% of Clockticks
                 | This metric does a rough estimation of how often L1D Fill
                 | Buffer unavailability limited additional L1D miss memory
                 | access requests to proceed. The higher the metric value, the
                 | deeper the memory hierarchy level the misses are satisfied
                 | from. Often it hints on approaching bandwidth limits (to L2
                 | cache, L3 cache or external memory). Avoid adding software
                 | prefetches if indeed memory BW limited.
                 |
            L2 Bound: N/A with HT on
            L3 Bound: N/A with HT on
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 0.0% of Clockticks
                L3 Latency: 100.0% of Clockticks
                 | This metric shows a fraction of cycles with demand load
                 | accesses that hit the L3 cache under unloaded scenarios
                 | (possibly L3 latency limited). Avoiding private cache misses
                 | (i.e. L2 misses/L3 hits) will improve the latency, reduce
                 | contention with sibling physical cores and increase
                 | performance. Note the value of this node may overlap with its
                 | siblings.
                 |
                SQ Full: 54.0% of Clockticks
                 | This metric measures fraction of cycles where the Super Queue
                 | (SQ) was full taking into account all request-types and both
                 | hardware SMT threads. The Super Queue is used for requests to
                 | access the L2 cache or to go out to the Uncore.
                 |
            DRAM Bound: N/A with HT on
                Memory Bandwidth: N/A with HT on
                Memory Latency: N/A with HT on
                    Local DRAM: 100.0% of Clockticks
                     | The number of CPU stalls on loads from the local memory
                     | exceeds the threshold. Consider caching data to improve
                     | the latency and increase the performance.
                     |
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 0.9% of Clockticks
                Store Latency: 94.5% of Clockticks
                False Sharing: 0.0% of Clockticks
                Split Stores: 1.4% of Clockticks
                DTLB Store Overhead: 0.0% of Clockticks
        Core Bound: 6.9% of Pipeline Slots
            Divider: 0.0% of Clockticks
            Port Utilization: 7.2% of Clockticks
                Cycles of 0 Ports Utilized: 24.9% of Clockticks
                Cycles of 1 Port Utilized: 10.0% of Clockticks
                Cycles of 2 Ports Utilized: 6.5% of Clockticks
                Cycles of 3+ Ports Utilized: 8.4% of Clockticks
                    ALU Operation Utilization: 7.8% of Clockticks
                        Port 0: 1.9% of Clockticks
                        Port 1: 18.9% of Clockticks
                        Port 5: 3.0% of Clockticks
                        Port 6: 7.5% of Clockticks
                    Load Operation Utilization: 8.5% of Clockticks
                        Port 2: 12.5% of Clockticks
                        Port 3: 10.1% of Clockticks
                    Store Operation Utilization: 5.7% of Clockticks
                        Port 4: 5.7% of Clockticks
                        Port 7: 0.0% of Clockticks
    Average CPU Frequency: 3.100 GHz 
    Total Thread Count: 14
    Paused Time: 0s
Effective Physical Core Utilization: 49.5% (6.933 out of 14)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 49.4% (13.834 out of 28)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: ./bin/omp_stencil_1D_np_STD 
    User Name: vadim
    Operating System: 3.10.0-957.1.3.el7.x86_64 NAME="CentOS Linux" VERSION="7 (Core)" ID="centos" ID_LIKE="rhel fedora" VERSION_ID="7" PRETTY_NAME="CentOS Linux 7 (Core)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:centos:centos:7" HOME_URL="https://www.centos.org/" BUG_REPORT_URL="https://bugs.centos.org/"  CENTOS_MANTISBT_PROJECT="CentOS-7" CENTOS_MANTISBT_PROJECT_VERSION="7" REDHAT_SUPPORT_PRODUCT="centos" REDHAT_SUPPORT_PRODUCT_VERSION="7" 
    Computer Name: n50003.10p.parallel.ru
    Result Size: 746.7 MB 
    Collection start time: 19:20:52 17/06/2022 UTC
    Collection stop time: 19:26:28 17/06/2022 UTC
    Collector Type: Event-based sampling driver
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.600 GHz 
        Logical CPU Count: 28
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: not detected

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
